void processing( uint32_t Fc, uint32_t Fw, uint32_t time ) {
	std::string recName( "hw" );
	auto recImpl = ReceiverWrapper::getReceiverByName( recName );
	uint32_t Fs = ( uint32_t )2.0e6;
	// uint32_t size = ( uint32_t )Fs;

	// RfSettings RfSet = { Fc, Fs, 496, 0, 1 };
	// ReceiverSettings RecSet = { RfSet, size, 0 };

	std::vector< Base::Complex< float > >  SignalFM( 0 );
	Filter filt;
	Resample resam;
	Demodulation demod;
	Base::WriteWAV writeSig;

	for( uint32_t i = 0; i < time; i++ ) {
// std::vector< Complex< uint8_t > >  Buf1;
// recImpl->getComplex( RecSet, Buf1 );
// uint32_t N = Buf1.size();
// std::vector< Base::Complex< float > >  Buf2( N );
// for( uint32_t j = 0; j < N; j++ ) {
// Buf2[ j ].re() = ( float )Buf1[ j ].real();
// Buf2[ j ].im() = ( float )Buf1[ j ].imag();
// }
		Fs = Fc / 44;
		uint32_t N = 2000000;
		noiseParams noise{ 50 };
		signalParams sig{ Fs, N };
		std::vector< sinParams > notes( 12 );
		notes[ 0 ].amp = 1;
		notes[ 0 ].freq = 262;
		notes[ 1 ].amp = 1;
		notes[ 1 ].freq = 277;
		notes[ 2 ].amp = 1;
		notes[ 2 ].freq = 294;
		notes[ 3 ].amp = 1;
		notes[ 3 ].freq = 311;
		notes[ 4 ].amp = 1;
		notes[ 4 ].freq = 330;
		notes[ 5 ].amp = 1;
		notes[ 5 ].freq = 349;
		notes[ 6 ].amp = 1;
		notes[ 6 ].freq = 370;
		notes[ 7 ].amp = 1;
		notes[ 7 ].freq = 392;
		notes[ 8 ].amp = 1;
		notes[ 8 ].freq = 415;
		notes[ 9 ].amp = 1;
		notes[ 9 ].freq = 440;
		notes[ 10 ].amp = 1;
		notes[ 10 ].freq = 466;
		notes[ 11 ].amp = 1;
		notes[ 11 ].freq = 494;

		std::vector< sinParams > sins( 1 );
		sins[ 0 ] = notes[ i ];

		FakeReceiver fake( noise, sins, sig );

		std::vector< Base::Complex< float > >  Buf2 = fake.GenSignal< float >();
		filt.Filt< float >( Buf2.data(), Buf2.data(), N, Fs, 0, Fw );
		std::vector< Base::Complex< float > > Buf3 = resam.resampled< float >( Buf2, Fs, 48000 );
		uint32_t Nadd = Buf3.size();
		for( uint32_t j = 0; j < Nadd; j++ ) {
			SignalFM.push_back( Buf3[ j ] );
		}
	}

	std::vector< float > Signal = demod.demodFM< float >( SignalFM );

	for( uint32_t j = 0; j < Signal.size(); j++ ) {
		Signal[ j ] = SignalFM[ j ].re() * 0.5;
	}

	writeSig.writeSignal( "/home/maksim/work/w_qt/Dest/signal.wav", Signal );
}
